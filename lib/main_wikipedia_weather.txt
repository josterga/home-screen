import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:html/parser.dart' as html_parser;
import 'package:html/dom.dart' as html;

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Wikipedia Current Events',
      theme: ThemeData(
        primarySwatch: Colors.blue,
        useMaterial3: true,
      ),
      home: const CurrentEventsHome(),
      debugShowCheckedModeBanner: false,
    );
  }
}

class CurrentEventsHome extends StatefulWidget {
  const CurrentEventsHome({Key? key}) : super(key: key);

  @override
  State<CurrentEventsHome> createState() => _CurrentEventsHomeState();
}

class _CurrentEventsHomeState extends State<CurrentEventsHome> {
  late Future<String> _eventsFuture;

  @override
  void initState() {
    super.initState();
    _eventsFuture = fetchWikipediaPageContent('Portal:Current events');
  }

  Future<String> fetchWikipediaPageContent(String pageTitle) async {
    final url = 'https://en.wikipedia.org/w/api.php';
    final params = {
      'action': 'parse',
      'page': pageTitle,
      'format': 'json',
      'origin': '*',
    };

    final response = await http.get(Uri.parse(url +
        '?' +
        params.entries
            .map((e) => '${e.key}=${Uri.encodeComponent(e.value)}')
            .join('&')));

    if (response.statusCode == 200) {
      final jsonData = jsonDecode(response.body);
      final rawHtml = jsonData['parse']['text']['*'];

      html.Document document = html_parser.parse(rawHtml);

      List<html.Element> contentElements =
          document.querySelectorAll('.current-events-content p, .current-events-content li');

      String parsedContent =
          contentElements.map((e) => e.text.trim()).join('\n\n• ');

      return parsedContent;
    } else {
      throw Exception('Failed to load Wikipedia page');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      extendBodyBehindAppBar: true,
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        title: const Text('Wikipedia Current Events'),
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: () {
              setState(() {
                _eventsFuture = fetchWikipediaPageContent('Portal:Current events');
              });
            },
          ),
        ],
      ),
      drawer: Drawer(
        backgroundColor: Colors.white.withOpacity(0.7),
        child: ListView(
          padding: EdgeInsets.zero,
          children: [
            DrawerHeader(
              decoration:
                  BoxDecoration(color: Colors.blue.withOpacity(0.5)),
              child: const Text(
                'Menu',
                style:
                    TextStyle(color: Colors.white, fontSize: 24),
              ),
            ),
            ListTile(
              leading: const Icon(Icons.info),
              title: const Text('About'),
              onTap: () {},
            ),
            ListTile(
              leading: const Icon(Icons.settings),
              title: const Text('Settings'),
              onTap: () {},
            ),
          ],
        ),
      ),
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [Colors.blue.shade200, Colors.purple.shade200],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
        child: FutureBuilder<String>(
          future: _eventsFuture,
          builder: (context, snapshot) {
            if (snapshot.connectionState == ConnectionState.waiting) {
              return const Center(child: CircularProgressIndicator());
            } else if (snapshot.hasError) {
              return Center(child:
                Column(mainAxisAlignment : MainAxisAlignment.center, children:[
                  Icon(Icons.error_outline, color : Colors.red, size :60),
                  SizedBox(height :16),
                  Text('Error:${snapshot.error}', textAlign :TextAlign.center),
                  SizedBox(height :20),
                  ElevatedButton(onPressed :(){
                    setState((){_eventsFuture=fetchWikipediaPageContent('Portal :Current events');});
                  }, child :Text("Retry"))
                ])
              );
            } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
              return const Center(child :Text('No content found'));
            }

            final content = snapshot.data!;
            return SingleChildScrollView(
              padding :const EdgeInsets.fromLTRB(16,100,16,16),
              child :Text("• $content", style :const TextStyle(fontSize :16, color :Colors.black87)),
            );
          },
        ),
      ),
    );
  }
}